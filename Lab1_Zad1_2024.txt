#include <stdio.h>
#include <mpi.h>
#include <limits.h>
#define n 16


int main(int argc, char* argv[])
{
	int rank, size, buff[n], rez, pod[n];
	MPI_Status status;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	for (int i = 0; i < size; i++)
	{
		buff[i] = rank * 3 + i;
	}

	if (rank == size - 1)
	{
		MPI_Reduce(&buff, &rez, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
		if (rez % 2 == 0)
		{
			pod[rank] = 1;
		}
		else 
		{
			pod[rank] = 0;
		}
		MPI_Send(&pod, 1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD);
	}

	if (rank != 0)
	{
		MPI_Recv(&pod, 1, MPI_INT, rank + 1, 0, MPI_COMM_WORLD, &status);

		MPI_Reduce(&buff, &rez, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
		if (rez % 2 == 0)
		{
			pod[rank] = 1;
		}
		else
		{
			pod[rank] = 0;
		}
		MPI_Send(&pod, 1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD);
	}

	if (rank == 0)
	{

	}
	

	MPI_Finalize();
	return 0;
}