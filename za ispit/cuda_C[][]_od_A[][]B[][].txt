%%writefile vector_add.cu
#include <cuda_runtime.h>
#include <math.h>
#include <iostream>

struct vektor
{
  int value, i;
};

__global__ void generateC(int *A, int *B, int *C, int N)
{
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;

    if(i < N && j < N)
    {
      C[i * N + j] = A[i * N + j] < B[j * N + i] ? A[i * N + j] : B[j * N + i];
      //C[i * N + j] = 1;
    }
};

int main()
{
  int N;
  printf("Unesi N: ");
  scanf("%d", &N);

  int *A = new int[N * N];
  int *B = new int[N * N];
  int *C = new int[N * N];
  vektor *v = new vektor[N];

  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < N; j++)
    {
      A[i * N + j] = rand() % 11 + 3;
      printf("%d ", A[i * N + j]);
    }
    printf("\n");
  }
  printf("\n");

  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < N; j++)
    {
      B[i * N + j] = rand() % 3 + 3;
      printf("%d ", B[i * N + j]);
    }
    printf("\n");
  }

  int *dev_A, *dev_B, *dev_C;
  vektor *dev_v;

  cudaMalloc((void**)&dev_A, N * N * sizeof(int));
  cudaMalloc((void**)&dev_B, N * N * sizeof(int));
  cudaMalloc((void**)&dev_C, N * N * sizeof(int));
  cudaMalloc((void**)&dev_v, N * sizeof(vektor));

  cudaMemcpy(dev_A, A, N * N * sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(dev_B, B, N * N * sizeof(int), cudaMemcpyHostToDevice);

  dim3 blockSize(16, 16);
  dim3 gridSize((N + blockSize.x - 1) / blockSize.x, (N + blockSize.y - 1) / blockSize.y);

  //int a = 256;
  //gridSize = min(a, gridSize);

  generateC<<<gridSize, blockSize>>>(dev_A, dev_B, dev_C, N);

  //cudaMemcpy(C, dev_C, N * N * sizeof(int), cudaMemcpyDeviceToHost);

  cudaError_t err = cudaMemcpy(C, dev_C, N * N * sizeof(int), cudaMemcpyDeviceToHost);
  if (err != cudaSuccess) {
    printf("Error copying from device to host: %s\n", cudaGetErrorString(err));
  }

  printf("C: \n");
  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < N; j++)
    {
      printf("%d ", C[i * N + j]);
    }
    printf("\n");
  }
  printf("\n");

  printf("\n");

  delete[] A;
  delete[] B;
  delete[] C;
  delete[] v;
  cudaFree(dev_A);
  cudaFree(dev_B);
  cudaFree(dev_C);
  cudaFree(dev_v);
  return 0;
}

