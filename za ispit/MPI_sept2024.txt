#include <string>
#include "iostream"
#include "mpi.h"

#define r 4
#define m 2
#define k 3

int main(int argc, char** argv)
{
	int A[r][m], B[m][k], C[r][k], rank, size;
	MPI_Datatype vrsta, row, vise_vrsta;


	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	if (rank == 0)
	{

		printf("A: \n");
		for (int i = 0; i < r; i++)
		{
			for (int j = 0; j < m; j++)
			{
				A[i][j] = i + j * 3;
				printf("%d ", A[i][j]);
			}
			printf("\n");
		}
		printf("\n\nB: \n");
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < k; j++)
			{
				B[i][j] = j + i * 2;
				printf("%d ", B[i][j]);
			}
			printf("\n");
		}
	}

	MPI_Type_vector(m, 1, 1, MPI_INT, &vrsta); // prvo napravimo jednu vrstu
	MPI_Type_commit(&vrsta);
	MPI_Type_vector(r / size, 1, r / size, vrsta, &vise_vrsta); // zatim napravimo vise vrsta
	MPI_Type_commit(&vise_vrsta);
	MPI_Type_create_resized(vise_vrsta, 0, m * sizeof(int), &row);
	MPI_Type_commit(&row);

	int* locA = NULL;
	locA = (int*)malloc(r / size * m * sizeof(int));

	MPI_Bcast(&B[0][0], m * k, MPI_INT, 0, MPI_COMM_WORLD);
	MPI_Scatter(&A[0][0], 1, row, locA, r / size * m, MPI_INT, 0, MPI_COMM_WORLD);

	printf("%d locA: \n", rank);
	for (int i = 0; i < r / size; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf("%d ", locA[i * r / size + j]);
		}
		printf("\n");
	}
	printf("\n\n%d B: \n", rank);
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < k; j++)
		{
			printf("%d ", B[i][j]);
		}
		printf("\n");
	}

	int* locC = NULL;
	locC = (int*)malloc(r / size * k * sizeof(int));

	for (int i = 0; i < r / size; i++)
	{
		for (int j = 0; j < k; j++)
		{
			locC[i * k + j] = 0;
		}
	}

	for (int i = 0; i < r / size; i++)
	{
		for (int j = 0; j < k; j++)
		{
			for (int q = 0; q < m; q++)
			{
				locC[i * k + j] += locA[i * m + q] * B[q][j];
			}
		}
	}

	printf("\n\n%d locC: \n", rank);
	for (int i = 0; i < r / size; i++)
	{
		for (int j = 0; j < k; j++)
		{
			printf("%d ", locC[i * k + j]);
		}
		printf("\n");
	}

	if (rank == 0)
	{
		for (int i = 0; i < r; i++)
			for (int j = 0; j < k; j++)
				C[i][j] = 0;
	}

	//MPI_Reduce(locC, &C, r * k, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD); // ovde je problem jer je locC manjih dim od C??

	MPI_Gather(locC, (r / size) * k, MPI_INT, &C, (r / size) * k, MPI_INT, 0, MPI_COMM_WORLD);

	if (rank == 0)
	{
		printf("\n\n%d C: \n", rank);
		for (int i = 0; i < r; i++)
		{
			for (int j = 0; j < k; j++)
			{
				printf("%d ", C[i][j]);
			}
			printf("\n");
		}
	}

	MPI_Finalize();
	return 0;
}