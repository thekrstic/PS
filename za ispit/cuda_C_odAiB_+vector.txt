%%writefile vector_add.cu
#include <cuda_runtime.h>
#include <math.h>
#include <iostream>

__global__ void generateC(int *A, int *B, int *C, int N)
{
  int i = blockDim.x * blockIdx.x + threadIdx.x;
  int j = blockDim.y * blockIdx.y + threadIdx.y;

  if(i < N && j < N)
  {
    C[i * N + j] = A[i * N + j] - 2 * B[i * N + j];
  }
}


__global__ void generateV(int *C, int *v, int N)
{
  int j = blockDim.x * blockIdx.x + threadIdx.x;

  if(j < N)
  {
    v[j] = 0;
    for(int k = 0; k < N; k++)
    {
      v[j] += C[k * N + j];
    }
    v[j] /= N;
  }
}


int main()
{
  int N;
  printf("Unesite dimenziju matrica: ");
  scanf("%d", &N);

  int *h_A = new int[N * N];
  int *h_B = new int[N * N];
  int *h_C = new int[N * N];
  int *h_v = new int[N];

  printf("\nA: \n");
  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < N; j++)
    {
      h_A[i * N + j] = rand() % 8 + 3;
      printf("%d  ", h_A[i * N + j]);
    }
    printf("\n");
  }
  printf("\n\nB: \n");
  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < N; j++)
    {
      h_B[i * N + j] = rand() % 6 + 4;
      printf("%d  ", h_B[i * N + j]);
    }
    printf("\n");
  }

  int *d_A, *d_B, *d_C, *d_v;

  cudaMalloc((void**)&d_A, N * N * sizeof(int));
  cudaMalloc((void**)&d_B, N * N * sizeof(int));
  cudaMalloc((void**)&d_C, N * N * sizeof(int));
  cudaMalloc((void**)&d_v, N * sizeof(int));

  cudaMemcpy(d_A, h_A, N * N * sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(d_B, h_B, N * N * sizeof(int), cudaMemcpyHostToDevice);

  dim3 blockSize(16, 16);
  int x = min(16, (N + blockSize.x - 1) / blockSize.x);
  int y = min(16, (N + blockSize.y - 1) / blockSize.y);
  dim3 gridSize(x, y);

  generateC<<<gridSize, blockSize>>>(d_A, d_B, d_C, N);

  cudaMemcpy(h_C, d_C, N * N * sizeof(int), cudaMemcpyDeviceToHost);

  printf("\nC: \n");
  for(int i = 0; i < N; i++)
  {
    for(int j = 0; j < N; j++)
    {
      printf("%d  ", h_C[i * N + j]);
    }
    printf("\n");
  }

  generateV<<<gridSize, blockSize>>>(d_C, d_v, N);

  cudaMemcpy(h_v, d_v, N * sizeof(int), cudaMemcpyDeviceToHost);

  printf("\nVector: \n");
  for(int i = 0; i < N; i++)
  {
    printf("%d  ", h_v[i]);
  }

  delete[] h_A;
  delete[] h_B;
  delete[] h_C;
  delete[] h_v;
  cudaFree(d_A);
  cudaFree(d_B);
  cudaFree(d_C);
  cudaFree(d_v);
  return 0;
}

